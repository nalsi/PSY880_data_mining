accuracy_rate.10 <- round(mean(predict.test.polynomial == OJ.test$Purchase),
digits = 4) * 100
svmfit.polynomial.tune <- tune(svm,
Purchase ~ .,
data = OJ.train,
kernel = "polynomial",
degree = 2,
ranges = list(cost = c(0.01,
0.05,
0.1,
0.5,
1,
5,
10),
gamma = c(0.1,
0.5,
1,
2,
4)))
summary(svmfit.radial.tune)
summary(svmfit.polynomial.tune)
best.model.3 <- svmfit.polynomial.tune$best.model
predict.training.polynomial.2 <- predict(best.model.3, newdata = OJ.train)
table(predict = predict.training.polynomial.2,
original = OJ.train$Purchase)
accuracy_rate.11 <- round(mean(predict.training.polynomial.2 == OJ.train$Purchase),
digits = 4) * 100
install.packages('rAltmetric')
library(rAltmetric)
acuna <- altmetrics('10.1038/489201a')
?altmetrics
acuna <- altmetrics(id = '10.1038/489201a')
acuna <- altmetrics(doi = '10.1038/489201a')
acuna
altmetric_data(acuna)
install.packages("tuber")
library(tuber)
?yt_topic_search
yt_topic_search(topic = "numpy")
yt_oauth()
yt_oauth("islanderee@gmail.com", "B*12fr*gB*12fr*g")
yt_oauth("islanderee@gmail.com", "B*12fr*gB*12fr*g")
?yt_oauth
yt_oauth("islanderee@gmail.com", "B*12fr*gB*12fr*g")
yt_oauth("809912369776-f6838pdkgt3u9im1j4aq033sqngbk1nc.apps.googleusercontent.com", "Mt-hmuge1OszuoFExDDsV0IZ")
devtools::install_github("dgrtwo/stackr")
stacktags("ggplot2")
library(stackr)
stacktags("ggplot2")
stackr::stack_questions()
?stackr::stack_questions
stackr::stack_questions(tags = "ggplot2")
stackr::stack_questions(tags == "ggplot2")
stackr::stack_questions(""ggplot2)
stackr::stack_questions("ggplot2")
?stackr
stack_tags("r")
stack_info()
stack_questions(tags = "r")
stack_search(tagged = c("ggplot2"))
stack_search(tagged = c("ggplot2"), max = 10000)
stack_search(tagged = c("ggplot2"), max = 1000)
stack_search(tagged = c("ggplot2"), max = 100)
stack_search(tagged = c("ggplot2"), max = 50)
stack_search(tagged = c("ggplot2"), page = 2)
stack_search(tagged = c("ggplot2"), page = 3)
stack_search(tagged = c("ggplot2"), page = 4)
stack_search(tagged = c("ggplot2"), page = 5)
stack_search(tagged = c("ggplot2"), page = 100)
stack_search(tagged = c("ggplot2"), page = 300)
stack_search(tagged = c("ggplot2"), page = 900)
stack_search(tagged = c("ggplot2"), page = 600)
stack_search(tagged = c("ggplot2"), page = 300)
stack_search(tagged = c("ggplot2"), page = 400)
stack_search(tagged = c("ggplot2"), page = 500)
stack_search(tagged = c("ggplot2"), page = 550)
stack_search(tagged = c("ggplot2"), page = 540)
stack_search(tagged = c("ggplot2"), page = 1, pagesize = 100, num_pages = 200)
data <- stack_search(tagged = c("ggplot2"), page = 1, pagesize = 100, num_pages = 200)
head(data)
install.packages("rtwitter")
install.packages("twitteR")
knitr::opts_chunk$set(echo = TRUE)
library(stackr)
library(twitteR)
data_ggplot2 <- stack_search(tagged = c("ggplot2"), page = 1, pagesize = 100, num_pages = 200)
View(data_ggplot2)
searchTwitter("ggplot2", n = 1000)
getTwitterOAuth
registerTwitterOAuth()
setup_twitter_oauth()
setup_twitter_oauth(list(appname = "altmetrics"))
View(data)
sum(data$answer_count)
?stack_search
knitr::opts_chunk$set(echo = TRUE)
library(stackr) #StackOverflow
library(twitteR) #Twitter
data_ggplot2 <- stack_search(tagged = c("ggplot2"), page = 1, pagesize = 20, num_pages = 500)
data_ggplot2 <- stack_search(tagged = c("ggplot2"), page = 1, pagesize = 10, num_pages = 1500)
View(data_ggplot2)
data_ggplot2 <- stack_search(tagged = c("ggplot2"), page = 1, pagesize = 20)
View(data_ggplot2)
data_ggplot2 <- stack_search(tagged = c("ggplot2"), page = 500, pagesize = 20)
View(data_ggplot2)
View(data)
dataset <- data.frame(rep(NA, 47))
View(dataset)
dataset <- data.frame(matrix(NA, nrow = 0, ncol = 47))
dataset <- data.frame(matrix(NA, nrow = 0, ncol = 47))
for (i in 1:2) {
data_ggplot2 <- stack_search(tagged = c("ggplot2"), page = 500, pagesize = 20)
if (nrow(data_ggplot2) != 0) {
dataset <- rbind(dataset, data_ggplot2)
}
}
View(dataset)
dataset <- data.frame(matrix(NA, nrow = 0, ncol = 47))
for (i in 1:750) {
data_ggplot2 <- stack_search(tagged = c("ggplot2"), page = 500, pagesize = 20)
if (nrow(data_ggplot2) != 0) {
dataset <- rbind(dataset, data_ggplot2)
}
}
authorize()
??authorize
install.packages("RGA")
library(RGA)
authroize()
authorize()
list_profiles()
View(dataset)
write.csv(dataset, "sof.csv", row.names = F)
Sys.setenv(STACK_EXCHANGE_KEY = "xIBTCksECxreUfRnWIbXgQ((")
for (i in 1:750) {
data_ggplot2 <- stack_search(tagged = c("ggplot2"), page = 500, pagesize = 20)
if (nrow(data_ggplot2) != 0) {
dataset <- rbind(dataset, data_ggplot2)
}
}
dataset <- data.frame(matrix(NA, nrow = 0, ncol = 47))
for (i in 1:750) {
data_ggplot2 <- stack_search(tagged = c("ggplot2"), page = 500, pagesize = 20)
if (nrow(data_ggplot2) != 0) {
dataset <- rbind(dataset, data_ggplot2)
}
}
for (i in 751:800) {
data_ggplot2 <- stack_search(tagged = c("ggplot2"), page = 500, pagesize = 20)
if (nrow(data_ggplot2) != 0) {
dataset <- rbind(dataset, data_ggplot2)
}
}
View(dataset)
data_ggplot2 <- stack_search(tagged = c("ggplot2"), page = i, pagesize = 20)
for (i in 1:750) {
data_ggplot2 <- stack_search(tagged = c("ggplot2"), page = i, pagesize = 20)
if (nrow(data_ggplot2) != 0) {
dataset <- rbind(dataset, data_ggplot2)
}
}
data_ggplot2 <- stack_search(tagged = c("ggplot2"), page = 1, pagesize = 20)
data_ggplot2 <- stack_search(tagged = c("ggplot2"), page = i, pagesize = 20)
for (i in 1:750) {
data_ggplot2 <- stack_search(tagged = c("ggplot2"), page = i, pagesize = 20)
if (nrow(data_ggplot2) != 0) {
dataset <- rbind(dataset, data_ggplot2)
}
}
dataset <- data.frame(matrix(NA, nrow = 0, ncol = 47))
for (i in 1:750) {
data_ggplot2 <- stack_search(tagged = c("ggplot2"), page = i, pagesize = 20)
if (nrow(data_ggplot2) != 0) {
dataset <- rbind(dataset, data_ggplot2)
}
}
dataset <- data.frame(matrix(NA, nrow = 0, ncol = 18))
for (i in 1:750) {
data_ggplot2 <- stack_search(tagged = c("ggplot2"), page = i, pagesize = 20)[,1:18]
if (nrow(data_ggplot2) != 0) {
dataset <- rbind(dataset, data_ggplot2)
}
}
data_ggplot2 <- stack_search(tagged = c("ggplot2"), page = 1, pagesize = 20)
View(data_ggplot2)
data_ggplot21 <- stack_search(tagged = c("ggplot2"), page = 2, pagesize = 20)
View(data_ggplot21)
colnames(data_ggplot2)
colnames(data_ggplot21)
dataset <- data.frame(matrix(NA, nrow = 0, ncol = 14))
for (i in 1:750) {
data_ggplot2 <- stack_search(tagged = c("ggplot2"), page = i, pagesize = 20)[,1:14]
if (nrow(data_ggplot2) != 0) {
dataset <- rbind(dataset, data_ggplot2)
}
}
data_ggplot2 <- stack_search(tagged = c("ggplot2"), page = 1, pagesize = 20)[,1:14]
data_ggplot21 <- stack_search(tagged = c("ggplot2"), page = 2, pagesize = 20)[,1:14]
colnames(data_ggplot2)
colnames(data_ggplot21)
data_ggplot21 <- stack_search(tagged = c("ggplot2"), page = 5, pagesize = 20)[,1:14]
colnames(data_ggplot21)
data_ggplot2 <- stack_search(tagged = c("ggplot2"), page = 1, pagesize = 20, num_pages = 750)
data_ggplot2 <- stack_search(tagged = c("ggplot2"), page = 1, pagesize = 100, num_pages = 200)
colnames(data_ggplot2)
data_ggplot2[,c("tags", "title", "is_answered", "view_count", "answer_count", "score", "creation_date", "last_edit_date", "question_id", "link", "closed_date", "closed_reason")]
dataset <- data.frame(matrix(NA, nrow = 0, ncol = 12))
for (i in 1:800) {
data_ggplot2 <- stack_search(tagged = c("ggplot2"), page = i, pagesize = 20)[,c("tags", "title", "is_answered", "view_count", "answer_count", "score", "creation_date", "last_edit_date", "question_id", "link", "closed_date", "closed_reason")]
if (nrow(data_ggplot2) != 0) {
dataset <- rbind(dataset, data_ggplot2)
} else {
break
}
}
data_ggplot2 <- stack_search(tagged = c("ggplot2"), page = i, pagesize = 20)
colnames(data_ggplot2)
dataset <- data.frame(matrix(NA, nrow = 0, ncol = 10))
for (i in 1:800) {
data_ggplot2 <- stack_search(tagged = c("ggplot2"), page = i, pagesize = 20)[,c("tags", "title", "is_answered", "view_count", "answer_count", "score", "creation_date", "last_edit_date", "question_id", "link")]
if (nrow(data_ggplot2) != 0) {
dataset <- rbind(dataset, data_ggplot2)
} else {
break
}
}
View(dataset)
write.csv(dataset, "stackoverflow_ggplot2.csv", row.names = F)
getTwitterOAuth("7ixJ3XU7zGRi95qI2H8muQ",
"IgqF4smkSwArxGcWdxx3QBJGgTp1X087p4rSkKZ6ikU")
setup_twitter_oauth("7ixJ3XU7zGRi95qI2H8muQ",
"IgqF4smkSwArxGcWdxx3QBJGgTp1X087p4rSkKZ6ikU")
setup_twitter_oauth("7ixJ3XU7zGRi95qI2H8muQ",
+                 "IgqF4smkSwArxGcWdxx3QBJGgTp1X087p4rSkKZ6ikU")
setup_twitter_oauth("7ixJ3XU7zGRi95qI2H8muQ", "IgqF4smkSwArxGcWdxx3QBJGgTp1X087p4rSkKZ6ikU")
searchTwitter('ggplot2',
n = 10000)
searchTwitter('ggplot2',
n = 10000) -> twitter_ggplot
?searchTwitter
searchTwitter('ggplot2',
n = 10000,
since = "2017/02/01") -> twitter_ggplot
searchTwitter('ggplot2',
since = "2017-02-01") -> twitter_ggplot
searchTwitter('ggplot2',
n = 10000) -> twitter_ggplot
searchTwitter('numpy',
n = 10000) -> twitter_ggplot
twitter_ggplot[1:10]
searchTwitter('numpy',
n = 10000,
since = "2017-02-01") -> twitter_ggplot
searchTwitter('numpy',
n = 10000,
since = "2017-02-09") -> twitter_ggplot
twitter_ggplot[1:20]
?retweetCount
?retweeted
twitter_ggplot.1 <- strip_retweets(twitter_ggplot)
twitter_ggplot.1[1:10]
twitter_ggplot.1[11:30]
searchTwitter('numpy',
n = 10000,
lang = "ENG",
since = "2017-02-09") -> twitter_ggplot
searchTwitter('numpy',
n = 10000,
lang = "eng",
since = "2017-02-09") -> twitter_ggplot
searchTwitter('numpy',
n = 10000,
lang = "en",
since = "2017-02-09") -> twitter_ggplot
twitter_ggplot.1 <- strip_retweets(twitter_ggplot)
twitter_ggplot.1[11:30]
twListToDF(twitter_ggplot)
data.frame <- twListToDF(twitter_ggplot.1)
write.csv(data.frame)
write.csv(data.frame, "twitter_numpy.csv", row.names = F)
View(data.frame)
citation()
install.packages("tree")
library(tree)
library(ISLR)
attach(Carseats)
?Carseats
str(Carseats)
summary(Carseats)
library(psych)
describe.by(Carseats)
High=ifelse(Sales>8,"Yes","No")
Carseats=data.frame(Carseats,High)
str(Carseats)
tree.carseats=tree(High~.-Sales,Carseats)
summary(tree.carseats)
plot(tree.carseats)
text(tree.carseats,pretty=0)
?text.tree
set.seed(2)
train=sample(1:nrow(Carseats), 200)
Carseats.test=Carseats[-train,]
High.test=High[-train]
tree.carseats=tree(High~.-Sales,Carseats,subset=train)
tree.pred=predict(tree.carseats,Carseats.test,type="class")
table(tree.pred,High.test)
(86+57)/200
mean(tree.pred==High.test)
set.seed(3)
cv.carseats=cv.tree(tree.carseats,FUN=prune.misclass)
?cv.tree
names(cv.carseats)
cv.carseats
par(mfrow=c(1,2))
plot(cv.carseats$size,cv.carseats$dev,type="b")
plot(cv.carseats$k,cv.carseats$dev,type="b")
prune.carseats=prune.misclass(tree.carseats,best=9)
plot(prune.carseats)
text(prune.carseats,pretty=0)
tree.pred=predict(prune.carseats,Carseats.test,type="class")
table(tree.pred,High.test)
(94+60)/200
prune.carseats=prune.misclass(tree.carseats,best=15)
plot(prune.carseats)
text(prune.carseats,pretty=0)
tree.pred=predict(prune.carseats,Carseats.test,type="class")
table(tree.pred,High.test)
(86+62)/200
library(MASS)
set.seed(1)
n=nrow(Boston)
train = sample(1:n, n/2)
tree.boston=tree(medv~.,Boston,subset=train)
summary(tree.boston)
plot(tree.boston)
text(tree.boston,pretty=0)
cv.boston=cv.tree(tree.boston)
plot(cv.boston$size,cv.boston$dev,type='b')
cv.boston
prune.boston=prune.tree(tree.boston,best=4)
plot(prune.boston)
text(prune.boston,pretty=0)
yhat=predict(tree.boston,newdata=Boston[-train,])
boston.test=Boston[-train,"medv"]
plot(yhat,boston.test)
mean((yhat-boston.test)^2)
install.packages("randomForest")
library(randomForest)
?predict.tree
set.seed(1)
bag.boston=randomForest(medv~.,data=Boston,subset=train,mtry=13)
bag.boston
yhat.bag = predict(bag.boston,newdata=Boston[-train,])
plot(yhat.bag, boston.test)
abline(0,1)
bag.boston=randomForest(medv~.,data=Boston,subset=train,mtry=13,ntree=25)
yhat.bag = predict(bag.boston,newdata=Boston[-train,])
mean((yhat.bag-boston.test)^2)
set.seed(1)
rf.boston=randomForest(medv~.,data=Boston,subset=train,mtry=6,importance=TRUE)
yhat.rf = predict(rf.boston,newdata=Boston[-train,])
mean((yhat.rf-boston.test)^2)
importance(rf.boston)
varImpPlot(rf.boston)
data(chrun)
data(churn)
install.packages("PUC")
install.packages("AUC")
library(AUC)
data(churn)
View(churn)
accuracy(churn$predictions,churn$labels)
data(churn)
accuracy(churn$predictions,churn$labels)
setwd("~/Documents/Github/PSY880_data_mining")
knitr::opts_chunk$set(echo = TRUE)
library(ISLR)
library(psych)
describe.by(OJ)
knitr::opts_chunk$set(echo = TRUE)
library(ISLR)
library(psych)
library(pander)
OJ <- OJ[,-c(3, 14)]
OJ$STORE <- as.factor(OJ$STORE)
describe.by(OJ)
View(OJ)
describeBy(OJ)
OJ <- OJ[,-c(3, 14)]
OJ$Purchase <- as.factor(OJ$Purchase)
OJ$STORE <- as.factor(OJ$STORE)
describeBy(OJ)
OJ <- OJ[,-c(3, 14)]
OJ$Purchase <- as.factor(OJ$Purchase)
OJ$STORE <- as.factor(OJ$STORE)
OJ <- OJ[,-c(3, 14)]
OJ$Purchase <- as.factor(OJ$Purchase)
OJ$STORE <- as.factor(OJ$STORE)
describeBy(OJ)
## Define train and test sets
set.seed(1)
train <- sample(nrow(OJ), 800)
OJ.train <- OJ[train,]
OJ.test <- OJ[-train,]
knitr::opts_chunk$set(echo = TRUE)
library(ISLR)
library(psych)
library(pander)
library(tree)
tree.OJ <- tree(Purchase ~ .,
data = OJ.train)
summary(tree.OJ)
View(OJ)
colnames(OK)
colnames(OJ)
colnames(OJ)[2:16]
View(OJ)
?OJ
## Growing the tree
tree.OJ <- tree(Purchase ~ .,
data = OJ.train)
summary(OJ)
summary(tree.OJ)
set.seed(10)
train=sample(1:nrow(OJ),800)
train.OJ=OJ[train,]
test.OJ=OJ[-train,]
tree.oj=tree(Purchase~.,data=train.OJ)
summary(tree.oj)
knitr::opts_chunk$set(echo = TRUE)
library(ISLR)
library(psych)
library(pander)
library(tree)
OJ <- OJ[,-c(3, 14)]
OJ$Purchase <- as.factor(OJ$Purchase)
OJ$STORE <- as.factor(OJ$STORE)
describeBy(OJ)
## Define train and test sets
set.seed(1)
train <- sample(nrow(OJ), 800)
OJ.train <- OJ[train,]
OJ.test <- OJ[-train,]
## Growing the tree
tree.OJ <- tree(Purchase ~ .,
data = OJ.train)
summary(tree.OJ)
tree.OJ
tree.OJ
plot(tree.OJ)
plot(tree.OJ)
text(tree.OJ, pretty=0)
plot(tree.OJ)
text(tree.OJ, pretty=0)
?text.tree
plot(tree.OJ)
text(tree.OJ, pretty=0)
?OJ
OJ.pred=predict(tree.OJ,
OJ.test,
type="class")
table(Prediction = OJ.pred,
Origin = OJ.test$Purchase)
accuracy_rate_1 <- mean(OJ.pred == OJ.test$Purchase)
OJ.pred=predict(tree.OJ,
OJ.test,
type="class")
pander(table(Prediction = OJ.pred,
Origin = OJ.test$Purchase))
accuracy_rate_1 <- mean(OJ.pred == OJ.test$Purchase)
set.seed(1)
tree.OJ.prune <- cv.tree(tree.OJ,
FUN = prune.misclass)
names(tree.OJ.prune)
tree.OJ.prune
par(mfrow=c(1,2))
plot(tree.OJ.prune$size,
tree.OJ.prune$dev,
type="b")
plot(tree.OJ.prune$k,
tree.OJ.prune$dev,
type="b")
tree.OJ.prune <- prune.misclass(tree.OJ,
best = 5)
plot(tree.OJ.prune)
text(tree.OJ.prune,
pretty=0)
OJ.pred <- predict(tree.OJ.prune,
OJ.test,
type="class")
table(Prediction = OJ.pred.prune,
Origin = OJ.test$Purchase)
tree.OJ.prune <- prune.misclass(tree.OJ,
best = 5)
plot(tree.OJ.prune)
text(tree.OJ.prune,
pretty=0)
OJ.pred.prune <- predict(tree.OJ.prune,
OJ.test,
type="class")
table(Prediction = OJ.pred.prune,
Origin = OJ.test$Purchase)
accuracy_rate_2 <- round(mean(OJ.pred == OJ.test$Purchase), digits = 3) * 100
OJ.pred.prune <- predict(tree.OJ.prune,
OJ.test,
type="class")
table(Prediction = OJ.pred.prune,
Origin = OJ.test$Purchase)
accuracy_rate_2 <- round(mean(OJ.pred.prune == OJ.test$Purchase), digits = 3) * 100
setdiff(OJ.pred, OJ.pred.prune)
summary(tree.OJ.prune)
summary(tree.OJ)
